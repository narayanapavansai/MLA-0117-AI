import math
import random

def simulated_annealing(objective_function, bounds, initial_temperature, cooling_rate, max_iterations):
    """
    Simulated Annealing algorithm to find the minimum of an objective function.
    
    :param objective_function: Function to minimize
    :param bounds: Bounds for the search space as a list of tuples [(min, max), ...]
    :param initial_temperature: Initial temperature for the algorithm
    :param cooling_rate: Cooling rate for temperature decay
    :param max_iterations: Maximum number of iterations
    :return: Best solution and its objective value
    """
    current_solution = [random.uniform(b[0], b[1]) for b in bounds]
    current_value = objective_function(current_solution)
    best_solution = current_solution[:]
    best_value = current_value
    temperature = initial_temperature

    for iteration in range(max_iterations):
        candidate_solution = [
            random.uniform(b[0], b[1]) for b in bounds
        ]
        candidate_value = objective_function(candidate_solution)

        delta = candidate_value - current_value
        acceptance_probability = math.exp(-delta / temperature) if delta > 0 else 1.0

        if random.random() < acceptance_probability:
            current_solution = candidate_solution[:]
            current_value = candidate_value

            if candidate_value < best_value:
                best_solution = candidate_solution[:]
                best_value = candidate_value

        temperature *= cooling_rate

        print(f"Iteration {iteration + 1}: Best Value = {best_value:.4f}, Temperature = {temperature:.4f}")

        if temperature < 1e-10:
            break

    return best_solution, best_value


def sphere_function(x):
    return sum(xi ** 2 for xi in x)

bounds = [(-5, 5), (-5, 5)]  
initial_temperature = 1000
cooling_rate = 0.95
max_iterations = 1000

best_solution, best_value = simulated_annealing(sphere_function, bounds, initial_temperature, cooling_rate, max_iterations)

print("\nOptimal Solution:", best_solution)
print("Objective Value at Optimal Solution:", best_value)
