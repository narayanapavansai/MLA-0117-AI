from heapq import heappop, heappush

def a_star_algorithm(start, goal, graph, h):
    """
    Implements the A* algorithm to find the shortest path.

    :param start: The starting node.
    :param goal: The goal node.
    :param graph: A dictionary where keys are nodes and values are lists of (neighbor, cost) pairs.
    :param h: A dictionary of heuristic values for each node.
    :return: A tuple containing the shortest path and its cost.
    """
    open_set = []
    heappush(open_set, (0 + h[start], start, [start]))

    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0

    while open_set:
        _, current, path = heappop(open_set)

        if current == goal:
            return path, g_score[goal]

        for neighbor, cost in graph[current]:
            tentative_g_score = g_score[current] + cost

            if tentative_g_score < g_score[neighbor]:
                g_score[neighbor] = tentative_g_score
                f_score = tentative_g_score + h[neighbor]
                heappush(open_set, (f_score, neighbor, path + [neighbor]))

    return None, float('inf') 

if __name__ == "__main__":
    graph = {
        'A': [('B', 1), ('C', 3)],
        'B': [('D', 1), ('E', 4)],
        'C': [('F', 2)],
        'D': [('G', 2)],
        'E': [('G', 1)],
        'F': [('G', 5)],
        'G': []
    }

    heuristic = {
        'A': 6,
        'B': 4,
        'C': 4,
        'D': 2,
        'E': 2,
        'F': 6,
        'G': 0
    }

    start_node = 'A'
    goal_node = 'G'

    path, cost = a_star_algorithm(start_node, goal_node, graph, heuristic)
    
    if path:
        print(f"Shortest path: {path}")
        print(f"Cost: {cost}")
    else:
        print("No path found.")
