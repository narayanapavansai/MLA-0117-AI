import itertools

def tsp_brute_force(distances):
    """
    Solves the TSP using brute force.

    Parameters:
        distances: A 2D list or matrix where distances[i][j] is the distance from city i to city j.

    Returns:
        A tuple containing the shortest path and its distance.
    """
    n = len(distances)
    cities = list(range(n))
    shortest_path = None
    min_distance = float('inf')

    for perm in itertools.permutations(cities[1:]):  
        path = (0,) + perm + (0,) 
        distance = sum(distances[path[i]][path[i + 1]] for i in range(len(path) - 1))

        if distance < min_distance:
            min_distance = distance
            shortest_path = path

    return shortest_path, min_distance

def tsp_held_karp(distances):
    """
    Solves the TSP using the Held-Karp algorithm (Dynamic Programming).

    Parameters:
        distances: A 2D list or matrix where distances[i][j] is the distance from city i to city j.

    Returns:
        A tuple containing the shortest path and its distance.
    """
    n = len(distances)
    all_sets = 1 << n
    dp = [[float('inf')] * n for _ in range(all_sets)]
    parent = [[None] * n for _ in range(all_sets)]

    dp[1][0] = 0  

    for mask in range(1, all_sets):
        for u in range(n):
            if not (mask & (1 << u)):
                continue

            for v in range(n):
                if mask & (1 << v):
                    continue

                next_mask = mask | (1 << v)
                cost = dp[mask][u] + distances[u][v]

                if cost < dp[next_mask][v]:
                    dp[next_mask][v] = cost
                    parent[next_mask][v] = u

    min_cost = float('inf')
    last_city = -1
    for i in range(1, n):
        cost = dp[all_sets - 1][i] + distances[i][0]
        if cost < min_cost:
            min_cost = cost
            last_city = i

    mask = all_sets - 1
    path = [0]
    while last_city is not None:
        path.append(last_city)
        next_city = parent[mask][last_city]
        mask ^= (1 << last_city)
        last_city = next_city

    path.reverse()
    return path, min_cost

distances = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

path, cost = tsp_brute_force(distances)
print(f"Brute Force: Shortest path is {path} with cost {cost}")

path, cost = tsp_held_karp(distances)
print(f"Held-Karp: Shortest path is {path} with cost {cost}")
