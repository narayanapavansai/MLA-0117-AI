class Graph:
    def __init__(self, vertices):
        self.vertices = vertices 
        self.adjacency_list = {i: [] for i in range(vertices)}

    def add_edge(self, u, v):
        self.adjacency_list[u].append(v)
        self.adjacency_list[v].append(u)

    def is_safe(self, vertex, color, colors):
        for neighbor in self.adjacency_list[vertex]:
            if colors[neighbor] == color:
                return False
        return True

    def graph_coloring_util(self, m, colors, vertex):
        if vertex == self.vertices:
            return True

        for color in range(1, m + 1):
            if self.is_safe(vertex, color, colors):
                colors[vertex] = color

                if self.graph_coloring_util(m, colors, vertex + 1):
                    return True

                colors[vertex] = 0

        return False

    def graph_coloring(self, m):
        colors = [0] * self.vertices

        if not self.graph_coloring_util(m, colors, 0):
            return "No solution exists"

        return colors

if __name__ == "__main__":
    g = Graph(4)

    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 2)
    g.add_edge(1, 3)

    m = 3

    result = g.graph_coloring(m)
    print("Coloring of the graph:", result)
