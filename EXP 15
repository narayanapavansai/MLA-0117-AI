import math

def print_board(board):
    """
    Print the Tic Tac Toe board in a user-friendly format.
    """
    for row in board:
        print("|".join(row))
        print("-" * 5)

def check_winner(board):
    """
    Check if there's a winner. Returns 'X', 'O', or None.
    """
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != " ":
            return row[0]

    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != " ":
            return board[0][col]

    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != " ":
        return board[0][0]

    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != " ":
        return board[0][2]

    return None

def is_draw(board):
    """
    Check if the game is a draw.
    """
    return all(cell != " " for row in board for cell in row) and check_winner(board) is None

def minimax(board, depth, is_maximizing):
    """
    The Minimax algorithm to determine the optimal move.
    :param board: Current state of the board
    :param depth: Current depth in the game tree
    :param is_maximizing: Boolean indicating whether the current move is maximizing or minimizing
    :return: Best score for the current player
    """
    winner = check_winner(board)
    if winner == "X":
        return -10 + depth
    elif winner == "O":
        return 10 - depth
    elif is_draw(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    score = minimax(board, depth + 1, False)
                    board[i][j] = " "
                    best_score = max(best_score, score)
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    score = minimax(board, depth + 1, True)
                    board[i][j] = " "
                    best_score = min(best_score, score)
        return best_score

def find_best_move(board):
    """
    Find the best move for the computer using Minimax.
    """
    best_score = -math.inf
    best_move = None

    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "O"
                score = minimax(board, 0, False)
                board[i][j] = " "
                if score > best_score:
                    best_score = score
                    best_move = (i, j)

    return best_move

def play_tic_tac_toe():
    """
    Play a game of Tic Tac Toe against an AI using the Minimax algorithm.
    """
    board = [[" " for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic Tac Toe!")
    print_board(board)

    while True:
        print("Your turn (X).")
        while True:
            try:
                row, col = map(int, input("Enter row and column (0, 1, or 2) separated by a space: ").split())
                if board[row][col] == " ":
                    board[row][col] = "X"
                    break
                else:
                    print("Cell is already occupied. Choose another.")
            except (ValueError, IndexError):
                print("Invalid input. Please enter row and column as two integers between 0 and 2.")

        print_board(board)

        if check_winner(board):
            print("You win!")
            break
        elif is_draw(board):
            print("It's a draw!")
            break

        print("Computer's turn (O).")
        best_move = find_best_move(board)
        if best_move:
            board[best_move[0]][best_move[1]] = "O"
        print_board(board)

        if check_winner(board):
            print("Computer wins!")
            break
        elif is_draw(board):
            print("It's a draw!")
            break

play_tic_tac_toe()
